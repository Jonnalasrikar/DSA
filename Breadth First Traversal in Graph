import java.util.*;

class BFSTraversal {
  public static void main(String args[]) {
    int edges[][] = { { 1, 2 }, { 2, 3 }, { 2, 4 }, { 4, 5 }, { 5, 8 }, { 8, 7 }, { 7, 6 }, { 6, 1 }, { 6, 9 } };
    int n = 10;
    ArrayList<ArrayList<Integer>> graph = createAdjacencyList(edges, n);
    ArrayList<Integer> bfs = BFS(graph, n, 1);
    for (int i = 0; i < bfs.size(); i++) {
      System.out.print(bfs.get(i) + " ");
    }

  }

  public static ArrayList<Integer> BFS(ArrayList<ArrayList<Integer>> graph, int n, int start) {
    ArrayList<Integer> bfs = new ArrayList<>();
    int visited[] = new int[n + 1];
    Queue<Integer> q = new LinkedList<>();
    q.add(start);
    visited[start] = 1;
    while (!q.isEmpty()) {
      int node = q.poll();
      bfs.add(node);
      ArrayList<Integer> nbrs = graph.get(node);
      for (int nbr : nbrs) {
        if (visited[nbr] == 0) {
          visited[nbr] = 1;
          q.add(nbr);
        }
      }
    }
    return bfs;

  }

  public static ArrayList<ArrayList<Integer>> createAdjacencyList(int edges[][], int n) {
    ArrayList<ArrayList<Integer>> graph = new ArrayList<ArrayList<Integer>>();
    for (int i = 0; i <= n; i++) {
      graph.add(new ArrayList<Integer>());
    }
    for (int row[] : edges) {
      int src = row[0];
      int dest = row[1];
      graph.get(src).add(dest);
      graph.get(dest).add(src);
    }
    return graph;
  }
}
