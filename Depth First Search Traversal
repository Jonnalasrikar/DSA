import java.util.*;

class DFSTraversal {
  public static void main(String args[]) {
    int edges[][] = { { 1, 2 }, { 2, 5 }, { 2, 6 }, { 1, 3 }, { 3, 7 }, { 7, 8 }, { 4, 8 }, { 3, 4 } };
    int n = 10;
    ArrayList<ArrayList<Integer>> graph = createAdjacencyList(edges, n);
    int visited[] = new int[n];
    int start = 1;
    ArrayList<Integer> dfs = new ArrayList<>();
    DFS(graph, n, visited, start, dfs);
    for (int i = 0; i < dfs.size(); i++) {
      System.out.print(dfs.get(i) + " ");
    }

  }

  public static void DFS(ArrayList<ArrayList<Integer>> graph, int n, int visited[], int start, ArrayList<Integer> dfs) {
    visited[start] = 1;
    dfs.add(start);
    ArrayList<Integer> nbrs = graph.get(start);
    for (int nbr : nbrs) {
      if (visited[nbr] == 0) {
        visited[nbr] = 1;
        DFS(graph, n, visited, nbr, dfs);
      }
    }
  }

  public static ArrayList<ArrayList<Integer>> createAdjacencyList(int edges[][], int n) {
    ArrayList<ArrayList<Integer>> graph = new ArrayList<ArrayList<Integer>>();
    for (int i = 0; i <= n; i++) {
      graph.add(new ArrayList<Integer>());
    }
    for (int row[] : edges) {
      int src = row[0];
      int dest = row[1];
      graph.get(src).add(dest);
      graph.get(dest).add(src);
    }
    return graph;
  }
}
