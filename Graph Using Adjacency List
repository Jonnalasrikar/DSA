import java.util.*;

class GraphUsingAdjacencyList {
  static class Edge {
    int node;
    int nbr;
    int wt;

    Edge(int node, int nbr, int wt) {
      this.node = node;
      this.nbr = nbr;
      this.wt = wt;
    }
  }

  public static void main(String args[]) {
    int edges[][] = { { 0, 1, 2 }, { 0, 2, 3 }, { 1, 3, 5, }, { 1, 4, 6 }, { 2, 3, 4 }, { 4, 6, 7 }, { 4, 5, 8 },
        { 6, 5, 9 } };
    int n = 7;
    ArrayList<Edge>[] graph = creategraph(edges, n);
    printgraph(graph);
    int src = 0;
    int dest = 5;
    int visited[] = new int[n];
    visited[src] = 1;
    System.out.println(ispathexist(graph, src, dest, visited));
  }

  public static boolean ispathexist(ArrayList<Edge>[] graph, int src, int dest, int visited[]) {
    if (src == dest) {
      return true;
    }
    ArrayList<Edge> nbrs = graph[src];
    for (int i = 0; i < nbrs.size(); i++) {
      int currentEdge = nbrs.get(i).nbr;
      if (visited[currentEdge] == 0) {
        visited[currentEdge] = 1;
        boolean ans = ispathexist(graph, currentEdge, dest, visited);
        if (ans == true) {
          return true;
        }
      }
    }
    return false;
  }

  public static void printgraph(ArrayList<Edge>[] graph) {
    for (int i = 0; i < graph.length; i++) {
      ArrayList<Edge> nbrs = graph[i];
      for (int j = 0; j < nbrs.size(); j++) {
        Edge currentNbr = nbrs.get(j);
        System.out.print(currentNbr.node + "->" + currentNbr.nbr + "->" + currentNbr.wt + "   ");
      }
      System.out.println();
    }
  }

  public static ArrayList<Edge>[] creategraph(int edges[][], int n) {
    ArrayList<Edge>[] graph = new ArrayList[n];
    for (int i = 0; i < n; i++) {
      graph[i] = new ArrayList<>();
    }
    for (int row[] : edges) {
      int node = row[0];
      int nbr = row[1];
      int wt = row[2];
      Edge newEdge = new Edge(node, nbr, wt);
      Edge reverseEdge = new Edge(nbr, node, wt);
      graph[node].add(newEdge);
      graph[nbr].add(reverseEdge);
    }
    return graph;
  }
}
