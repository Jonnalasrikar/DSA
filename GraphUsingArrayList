import java.lang.ref.Reference;
import java.util.*;

class AdjacencyListGraph {
  static class Edge {
    int src;
    int des;
    int wt;

    Edge(int src, int des, int wt) {
      this.src = src;
      this.des = des;
      this.wt = wt;
    }
  }

  public static void main(String args[]) {
    int edges[][] = { { 0, 1, 2 }, { 0, 2, 4 }, { 2, 3, 3 }, { 1, 3, -1 }, { 4, 6, -1 }, { 4, 5, 5 },
        { 6, 5, -3 } };
    int n = 7;
    ArrayList<Edge>[] graph = createAdjacencyList(edges, n);
    int src = 0;
    int dest = 6;
    int visited[] = new int[n];
    visited[src] = 1;
    for (int i = 0; i < graph.length; i++) {
      for (int j = 0; j < graph[i].size(); j++) {
        System.out.print(graph[i].get(j).src + "->" + graph[i].get(j).des + "->" +
            graph[i].get(j).wt + " , ");
      }
      System.out.println();
    }
    System.out.println(ispathexist(graph, src, dest, visited));
  }

  public static boolean ispathexist(ArrayList<Edge>[] graph, int src, int dest, int visited[]) {
    if (src == dest) {
      return true;
    }
    ArrayList<Edge> nbrs = graph[src];
    for (Edge edge : nbrs) {
      int nbr = edge.des;
      if (visited[nbr] == 0) {
        visited[nbr] = 1;
        boolean ans = ispathexist(graph, nbr, dest, visited);
        if (ans == true) {
          return true;
        }
      }
    }
    return false;
  }

  public static ArrayList<Edge>[] createAdjacencyList(int edges[][], int n) {
    ArrayList<Edge>[] graph = new ArrayList[n];
    for (int i = 0; i < graph.length; i++) {
      graph[i] = new ArrayList<>();
    }
    for (int[] edge : edges) {
      int src = edge[0];
      int dest = edge[1];
      int cost = edge[2];
      Edge newEdge = new Edge(src, dest, cost);
      Edge reverseEdge = new Edge(dest, src, cost);
      graph[src].add(newEdge);
      graph[dest].add(reverseEdge);
    }
    return graph;
  }
}
